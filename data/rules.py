# For importing the game data (cards, tokens etc.) into their specified data structures
import numpy as np

card_path = './cards.csv'
nobles_path = './nobles.csv'

class Card:
    def __init__(self, id, data):
        # id: card ID, autogenerated
        # cost: array of ints representing the token cost of the card

        self.id = id
        self.tier = data[0]
        self. value = data[1]
        self.type = data[2]
        self.cost = data[3:]

    def __str__(self):
        return f"ID: {self.id}, Tier: {self.tier}, Value: {self.value}, Type: {self.type}, Cost: {self.cost}"   

class Noble:
    def __init__(self, id, cost):
    # cost: array of ints representing total card cost for each type required to buy the noble
        self.id = id
        self.cost = cost    
        self.points = 3

    def __str__(self):
        return f"ID: {self.id}, Cost: {self.cost}"


class Board:
    def __init__(self):
        # read all data
        self.all_cards, self.nobles = self._read_data()
        self.open_cards = []
        self.deck_cards = []
        

    def _read_data(self):
        # reads card and nobles into their respective class objects. Stores in array.
        temp_cards = np.genfromtxt(card_path, dtype=np.int32, delimiter=',', skip_header=1)
        temp_nobles = np.genfromtxt(nobles_path, dtype=np.int32, delimiter=',', skip_header=1)

        cards = []
        for i in range(len(temp_cards)):
            c = Card(i, temp_cards[i])
            cards.append(c)

        nobles = []
        for i in range(len(temp_nobles)):
            n = Noble(i, temp_nobles[i])
            nobles.append(n)

        return cards, nobles
        

class TokenBank:
    def __init__(self):
        # Start with 5 of each colour
        self.gold = 5
        self.green = 5
        self.white = 5
        self.blue = 5
        self.black = 5
        self.red = 5

    def update(self, changes):
        # changes: array of +ve or -ve ints representing the number to 
        # be added/reduced for each token type. Tokens in the bank cannot exceed 5 per type.
        pass
    
class PlayerState:
    def __init__(self, id, turn_order, board: Board, bank: TokenBank):
        self.id = id
        self.turn_order = turn_order
        self.points = 0

        # Allows player to reference board and bank states
        self.board = board
        self.bank = bank

        # Player inventory
        self.cards = []
        self.reserved_cards = []
        self.tokens = []
    
    ## Define player actions
    def takeToken(self, **kwargs):
        # Player is allowed to draw 3 tokens of different colour, or 2 tokens of same colour,
        # provided there are 4 tokens of that colour in the bank
        pass

    def buyCard(self, card):
        pass

    def buyReserve(self, card):
        pass

    def reserveCard(self, card):
        # Player picks a card on the board or from top of deck to add to their reserve pile
        # Upon reserving a card, award player with 1 gold token
        pass

    def _returnTokens(self, tokens):
        # tokens: array of numbers representing how many of each token to return
        # Player is allowed only 10 tokens at a time. They must return any surplus to the bank.
        pass
